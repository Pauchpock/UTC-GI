// Includes, project
#include "red-component.hpp"

// Includes, standar
#include <cmath>

using namespace sy31;

////////////////////////////////////////////////////////////////
// RTMaps - Input
////////////////////////////////////////////////////////////////
MAPS_BEGIN_INPUTS_DEFINITION(RedComponent)
  MAPS_INPUT("Source", MAPS::FilterIplImage, MAPS::FifoReader)
MAPS_END_INPUTS_DEFINITION

////////////////////////////////////////////////////////////////
// RTMaps - Output
////////////////////////////////////////////////////////////////
MAPS_BEGIN_OUTPUTS_DEFINITION(RedComponent)
MAPS_OUTPUT("Red", MAPS::IplImage, NULL, NULL, 1)
MAPS_END_OUTPUTS_DEFINITION

////////////////////////////////////////////////////////////////
// RTMaps - Properties
////////////////////////////////////////////////////////////////
MAPS_BEGIN_PROPERTIES_DEFINITION(RedComponent)
MAPS_END_PROPERTIES_DEFINITION

////////////////////////////////////////////////////////////////
// RTMaps - Actions
////////////////////////////////////////////////////////////////
MAPS_BEGIN_ACTIONS_DEFINITION(RedComponent)
MAPS_END_ACTIONS_DEFINITION

////////////////////////////////////////////////////////////////
// RTMaps - Definition
////////////////////////////////////////////////////////////////
MAPS_COMPONENT_DEFINITION(
	RedComponent, "RedComponent", "1.0", 128,
	MAPS::Threaded|MAPS::Sequential,MAPS::Threaded,
  1, // Nb of inputs
	1, // Nb of outputs
	0, // Nb of properties
	0) // Nb of actions

void
RedComponent::Birth()
{
  mIsAllocated = false;
}

void
RedComponent::Core() 
{
  MAPSIOElt* input = StartReading(Input("Source"));
  IplImage& source = input->IplImage();
  if (!mIsAllocated)
    allocateOutputs(source);

  MAPSIOElt* outRed  = StartWriting(Output("Red"));

  IplImage& red  = outRed->IplImage();

  /* Convertir l'image en niveau de gris */
 detectRed(source,red);

  /* Set the timestamps */
  //outRed->Timestamp()  = MAPS::CurrentTime();

  StopReading(Input("Source"));
  StopWriting(outRed);
}

void
RedComponent::Death()
{
  // Couic! :(
}

void
RedComponent::allocateOutputs(IplImage const& src)
{
	IplImage red = MAPS::IplImageModel(src.width, src.height, MAPS_CHANNELSEQ_BGR);

  Output("Red").AllocOutputBufferIplImage(red);

  mIsAllocated = true;
}

void
RedComponent::detectRed(IplImage const& src,IplImage & dst)
{
	// Pour simplement avoir l'image, return src;
	for(int i=0; i<src.width*src.height;i++) {

		int blue	= src.imageData[3*i];
		int green	= src.imageData[3*i+1];
		int red		= src.imageData[3*i+2];
		
		int new_blue, new_green, new_red;

		//dst.imageData[3*i] = src.imageData[3*i];
		//dst.imageData[3*i+1] = src.imageData[3*i+1];
		//dst.imageData[3*i+2] = src.imageData[3*i+2];

		//Si c'est rouge
		/*if(red > 100 && (red > 3*blue) && (red > 3*green)) {
			new_blue = 0;
			new_red = 0;
			new_green = 255;
		}
		else {
			new_blue = blue;
			new_green = green;
			new_red = red;
		}*/


		dst.imageData[3*i] = (blue>=red)&&(blue>=green)?255:0;
		dst.imageData[3*i+1] = (green>=blue)&&(green>=red)?255:0;
		dst.imageData[3*i+2] = (red>=blue)&&(red>=green)?255:0;
	}
}
